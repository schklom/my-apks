name: Download and release APKs

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '2 0 * * MON,WED,FRI,SUN'
    
  push:
    branches: main
    paths:
      - apps.txt
      - .github/workflows/download-and-release-apks.yml

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  # only run one build at a time
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  list-apps:
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.set-matrix.outputs.apps }}
    steps:
      - uses: actions/checkout@v5
      - name: set-matrix
        id: set-matrix
        run: |
          app_list=$(cat apps.txt | jq -R -s -c 'split("\n")[:-1]')
          echo "apps=${app_list}" | tee -a "$GITHUB_OUTPUT"
  
  release:
    needs: list-apps
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # stop GH from cancelling all matrix builds if one fails
      matrix:
        app: ${{ fromJSON(needs.list-apps.outputs.apps) }}
      max-parallel: 1 # Ensure commits and releases don't happen simultaneously

    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository.
      contents: write

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5

      - name: Download apkeep
        run: |
          # https://github.com/EFForg/apkeep
          #docker run \
          #  --rm \
          #  -v ${{ env.apk_dir_path }}:/output \
          #  ghcr.io/efforg/apkeep:stable \

          curl -sSL -o apkeep "https://github.com/EFForg/apkeep/releases/latest/download/apkeep-x86_64-unknown-linux-gnu"
          chmod +x apkeep

      - name: Prepare folder
        run: |
          echo "apk_dir_path=${{ matrix.app }}" | tee -a "$GITHUB_ENV"
          mkdir -p "${{ matrix.app }}"

      - name: Store version of new apk
        run: |
          ./apkeep -a ${{ matrix.app }} -l . | tail -n 1 | grep -oP '[\d+.]+' | sort -V | tail -n 1 > ${{ env.apk_dir_path }}/version_new_file

      - name: Get current and new version of apk
        run: |
          # Create current files if they don't exist
          touch ${{ env.apk_dir_path }}/hash_current_file
          touch ${{ env.apk_dir_path }}/version_current_file
          echo "current_version=$(cat ${{ env.apk_dir_path }}/version_current_file)" | tee -a "$GITHUB_ENV"
          echo "new_version=$(cat ${{ env.apk_dir_path }}/version_new_file)" | tee -a "$GITHUB_ENV"
          echo "current_hash=$(cat ${{ env.apk_dir_path }}/hash_current_file)" | tee -a "$GITHUB_ENV"

      - name: Get APK
        if: ${{ env.current_version != env.new_version }}
        run: |
          ./apkeep \
            -a ${{ matrix.app }} \
            -d apk-pure \
            ${{ env.apk_dir_path }}

          file_path=`ls ${{ env.apk_dir_path }}/*apk`
          echo "apk_file_path=${file_path}" | tee -a "$GITHUB_ENV"

      - name: Store md5 hash of new apk
        if: ${{ env.current_version != env.new_version }}
        run: |
          md5sum "${{ env.apk_file_path }}" | cut -d " " -f 1 | tee -a ${{ env.apk_dir_path }}/hash_new_file "$GITHUB_ENV"
      
      - name: Record last update date and update current hash+version
        if: ${{ env.current_version != env.new_version }}
        run: |
          date +%Y-%m-%d_%H-%M > ${{ env.apk_dir_path }}/last_update_date
          echo "last_update_date_env=$(cat ${{ env.apk_dir_path }}/last_update_date)" | tee -a "$GITHUB_ENV"
          mv ${{ env.apk_dir_path }}/hash_new_file ${{ env.apk_dir_path }}/hash_current_file
          mv ${{ env.apk_dir_path }}/version_new_file ${{ env.apk_dir_path }}/version_current_file

      - name: Find file extension
        if: ${{ env.current_version != env.new_version }}
        run: |
          file=${{ env.apk_file_path }}
          echo "file_extension=${file##*.}" | tee -a "$GITHUB_ENV"
      
#      # https://code.whatever.social/questions/13469147/get-android-apk-file-versionname-or-versioncode-without-installing-apk
#      - name: Find version number
#        if: ${{ env.current_version != env.new_version }}
#        run: |
#          sudo apt install -y aapt
#          tree -aF ${{ matrix.app }}
#
#          # If it is a .xapk file, unzip it and find the version in the extracted apk
#          file=${{ env.apk_file_path }}
#
#          # Check if file extension is xapk
#          if [[ "$file" == *.xapk ]]; then
#            
#            # Remove .xapk extension for folder name
#            folder="${file%.xapk}"
#            # Unzip the file to the new folder
#            unzip "$file" -d "$folder"
#            echo "Unzipped $file to folder $folder"
#
#            echo "Find apk"
#            find "${folder}" -name "${{ matrix.app }}.apk"
#
#            echo "tree"
#            tree -aF "${folder}"
#
#            file=`find "${folder}" -name "${{ matrix.app }}.apk"`
#            echo "VARIABLE file = $file"
#          else
#            echo "${file} is not an .xapk file."
#          fi
#          
#          # get versionName string, remove "versionName=, remove "'". This is more readable than lookaheads/lookbehinds
#          version=`aapt dump badging ${file} | grep -Po "versionName='.+?'" | sed "s/versionName=//" | sed "s/'//g"`
#          echo "version=${version}" | tee -a "$GITHUB_ENV"
##          unzip -d apk_files ${{ env.filename }}
##          echo "version=$(grep "Version" apk_files/assets/about.html | grep -oP '[0-9\.]+')" >> $GITHUB_ENV
##          rm -rf apk_files

      - name: Write tag name
        if: ${{ env.current_version != env.new_version }}
        #run: echo "tagname=${{ env.new_version }}_${{ env.last_update_date_env }}" >> $GITHUB_ENV
        run: |
          ver="${{ env.new_version }}"
          last_update="${{ env.last_update_date_env }}"
          tagname="${{ matrix.app }}_${ver}_${last_update}"
          echo "tagname=${tagname}" | tee -a "$GITHUB_ENV"

      - name: Update to get other matrix job changes
        run: git pull
          
      - name: Release apk if hashes are different
        if: ${{ env.current_version != env.new_version }}
        id: release-apk
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.tagname }}
          body: "New version of ${{ matrix.app }}"
          files: ${{ env.apk_file_path }}

      # https://github.com/marketplace/actions/gh-release#outputs
      - name: Add the download link to docs/index.html
        if: ${{ env.current_version != env.new_version }}
        run: |
          file="docs/index.html"
          url="${{ fromJSON(steps.release-apk.outputs.assets)[0].browser_download_url }}"
          what_to_add="    <li><a href=${url}>${{ env.tagname }}.${{ env.file_extension }}</a></li>"

          # Add before existing links if they exist
          line_where_to_add=`grep -n ".*${{ matrix.app }}.*" $file | cut -f 1 -d ":" | head -n 1`
          line_where_to_add=${line_where_to_add:+$((line_where_to_add - 1))}
          
          # if none exists, add after <body> (before that line+1, so that we can apply -1 after regardless)
          line_body=`grep -n "<body>" $file | cut -f 1 -d ":" | head -n 1`
          
          where_to_add=${line_where_to_add:-$line_body}

          # Add the line
          sed -i "${where_to_add}r"<(echo "$what_to_add") $file

          echo 'cat $file'
          cat "$file"
          
      
      - name: Commit and push the change
        if: ${{ env.current_version != env.new_version }}
        uses: stefanzweifel/git-auto-commit-action@v7
        with:
          commit_message: "Update ${{ matrix.app }}'s hash and version update date and add link to docs/index.html"
          file_pattern: '${{ env.apk_dir_path }}/hash_current_file ${{ env.apk_dir_path }}/version_current_file ${{ env.apk_dir_path }}/last_update_date docs/index.html'
